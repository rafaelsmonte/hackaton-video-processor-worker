
name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Instalar FFmpeg
        run: go install github.com/mattn/goveralls@latest
      - name: Install goveralls

        run: sudo apt-get update && sudo apt-get install -y ffmpeg


      - name: Run Tests and Generate Coverage
        run: go test -covermode=count -coverprofile=coverage.out ./...

      - name: Upload to Coveralls
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        run: goveralls -coverprofile=coverage.out -service=github
  sonar:
    name: sonar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Instalar FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg
      - name: Instalar Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23 
      - name: Instalar dependências
        run: go mod tidy

      - name: Rodar testes e gerar cobertura
        run: go test -coverprofile=coverage.out ./...

      - name: Executar análise SonarQube
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.sources=.
            -Dsonar.go.coverage.reportPaths=coverage.out

      - name: Verificar Quality Gate no SonarQube
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push: 
    name: Build Image
    needs: sonar
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_ECR_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY:  hackaton/video_processor_worker
        LATEST_TAG: latest
      run: |
        export BUILD_VERSION_TAG=$(date +%Y-%m-%d-%I_%M_%S_utc)
        docker build -f docker/Dockerfile -t "video-worker-$BUILD_VERSION_TAG" .
        docker tag "video-worker-$BUILD_VERSION_TAG:latest" "$ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION_TAG" && docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION_TAG"
        docker tag "video-worker-$BUILD_VERSION_TAG:latest" "$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG" && docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG"
  deploy: 
      needs: build-and-push
      name: Deploy to EKS Image
      runs-on: ubuntu-latest
      environment: production
      steps: 
      - name: Check out code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Install eksctl
        run: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH 
            curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            sudo mv /tmp/eksctl /usr/local/bin

      - name: Update EKS deployment with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY:  hackaton/video_processor_worker
          DEPLOYMENT_NAME: hackaton-video-processor-worker-service-deployment
          CLUSTER_NAME: video-processor-cluster
          IMAGE_TAG: latest
        run: |
            eksctl utils write-kubeconfig --cluster=$CLUSTER_NAME --region=us-east-1
            kubectl rollout restart deployment/$DEPLOYMENT_NAME       
  
