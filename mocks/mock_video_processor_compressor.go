// Code generated by MockGen. DO NOT EDIT.
// Source: hackaton-video-processor-worker/internal/domain/adapters (interfaces: IVideoProcessorCompressor)

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "hackaton-video-processor-worker/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVideoProcessorCompressor is a mock of IVideoProcessorCompressor interface.
type MockIVideoProcessorCompressor struct {
	ctrl     *gomock.Controller
	recorder *MockIVideoProcessorCompressorMockRecorder
}

// MockIVideoProcessorCompressorMockRecorder is the mock recorder for MockIVideoProcessorCompressor.
type MockIVideoProcessorCompressorMockRecorder struct {
	mock *MockIVideoProcessorCompressor
}

// NewMockIVideoProcessorCompressor creates a new mock instance.
func NewMockIVideoProcessorCompressor(ctrl *gomock.Controller) *MockIVideoProcessorCompressor {
	mock := &MockIVideoProcessorCompressor{ctrl: ctrl}
	mock.recorder = &MockIVideoProcessorCompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVideoProcessorCompressor) EXPECT() *MockIVideoProcessorCompressorMockRecorder {
	return m.recorder
}

// Compress mocks base method.
func (m *MockIVideoProcessorCompressor) Compress(arg0 entities.Folder) (entities.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compress", arg0)
	ret0, _ := ret[0].(entities.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compress indicates an expected call of Compress.
func (mr *MockIVideoProcessorCompressorMockRecorder) Compress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compress", reflect.TypeOf((*MockIVideoProcessorCompressor)(nil).Compress), arg0)
}
