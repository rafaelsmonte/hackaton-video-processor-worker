// Code generated by MockGen. DO NOT EDIT.
// Source: hackaton-video-processor-worker/internal/domain/adapters (interfaces: IVideoProcessorMessaging)

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "hackaton-video-processor-worker/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVideoProcessorMessaging is a mock of IVideoProcessorMessaging interface.
type MockIVideoProcessorMessaging struct {
	ctrl     *gomock.Controller
	recorder *MockIVideoProcessorMessagingMockRecorder
}

// MockIVideoProcessorMessagingMockRecorder is the mock recorder for MockIVideoProcessorMessaging.
type MockIVideoProcessorMessagingMockRecorder struct {
	mock *MockIVideoProcessorMessaging
}

// NewMockIVideoProcessorMessaging creates a new mock instance.
func NewMockIVideoProcessorMessaging(ctrl *gomock.Controller) *MockIVideoProcessorMessaging {
	mock := &MockIVideoProcessorMessaging{ctrl: ctrl}
	mock.recorder = &MockIVideoProcessorMessagingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVideoProcessorMessaging) EXPECT() *MockIVideoProcessorMessagingMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIVideoProcessorMessaging) Publish(arg0 entities.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIVideoProcessorMessagingMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIVideoProcessorMessaging)(nil).Publish), arg0)
}
