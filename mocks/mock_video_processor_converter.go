// Code generated by MockGen. DO NOT EDIT.
// Source: hackaton-video-processor-worker/internal/domain/adapters (interfaces: IVideoProcessorConverter)

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "hackaton-video-processor-worker/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVideoProcessorConverter is a mock of IVideoProcessorConverter interface.
type MockIVideoProcessorConverter struct {
	ctrl     *gomock.Controller
	recorder *MockIVideoProcessorConverterMockRecorder
}

// MockIVideoProcessorConverterMockRecorder is the mock recorder for MockIVideoProcessorConverter.
type MockIVideoProcessorConverterMockRecorder struct {
	mock *MockIVideoProcessorConverter
}

// NewMockIVideoProcessorConverter creates a new mock instance.
func NewMockIVideoProcessorConverter(ctrl *gomock.Controller) *MockIVideoProcessorConverter {
	mock := &MockIVideoProcessorConverter{ctrl: ctrl}
	mock.recorder = &MockIVideoProcessorConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVideoProcessorConverter) EXPECT() *MockIVideoProcessorConverterMockRecorder {
	return m.recorder
}

// ConvertToImages mocks base method.
func (m *MockIVideoProcessorConverter) ConvertToImages(arg0 entities.File) (entities.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToImages", arg0)
	ret0, _ := ret[0].(entities.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToImages indicates an expected call of ConvertToImages.
func (mr *MockIVideoProcessorConverterMockRecorder) ConvertToImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToImages", reflect.TypeOf((*MockIVideoProcessorConverter)(nil).ConvertToImages), arg0)
}
